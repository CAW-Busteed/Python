expectant results for each test
Hash returned what I requested (will modify further later)
check
    works by
        taking the length of the word, alloacating memory for it, and turning every letter into the lowercase 
        we hash the word to get its address and use a pointer node to go through the table 
        (so long as the table[x] doesnt lead to NULL)
        the pointer to the word is compared and returns true if it is identical
    assert by
        giving a word to compare to listed dictionary
        returns true if word is identical to dictionary word

load (more complicated)
    works by
    assert by
        confirming the dictionary is in the linked list

size
    works by
        relying on global variable total_w
    assert by
        load, then assert size is equal to the total_w

unload
    works by
    assert by
        I have no idea. This is for later.


alternatives

// RESult is the lowercase letters put together; strncat expects a valid destination, allocate memory for res before appending characters to it.
// char *res = malloc((length + 1) * sizeof(char));
// res[length] = '\0';     //initialize res as an empty string ('\0')

// // set up a baseline to compare dict to (all lowercase)
// for (int i = 0; i < length; i++)
// {
//     //concatenate each lowercase character using a temporary string (des) and strncat.
//     char des[2] = {tolower(word[i]), '\0'}; //-----------------------------------------------------why does this fail
//     strncat(res, des, 2);
// }

// char *res;
// strncat(res, word, length);
// int i = 0;
// while (res[i])
// {
//     putchar(tolower(res[i]));
//     i++;
// }

// char *res = malloc((length + 1) * sizeof(char)); // Allocate memory for res
// for (int i = 0; i < length; i++)
// {
//     res[i] = tolower(word[i]); // Convert each character to lowercase-------------------fails HERE
// }
// const char *res = word;

// char *res;
// strncat(res, word, length);

    // int length = strlen(word);
    // for (int i = 0; word[i]; i++)
    // {
    //     word[i] = tolower(word[i]);
    // }
